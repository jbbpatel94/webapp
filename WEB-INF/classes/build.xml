<?xml version='1.0'?>
<!--
Copyright (C) 2002-2004 MySQL AB

   This program is free software; you can redistribute it and/or modify
   it under the terms of version 2 of the GNU General Public License as
   published by the Free Software Foundation.
   
 
   There are special exceptions to the terms and conditions of the GPL 
   as it is applied to this software. View the full text of the 
   exception exception in file EXCEPTIONS-CONNECTOR-J in the directory of this 
   software distribution.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!-- version $Id: build.xml,v 1.26.2.45 2005/02/09 17:50:22 mmatthew Exp $ -->

<project name="MySQL Connector/J" default="dist" basedir=".">
	<property name="major_version" value="3"/>
	<property name="minor_version" value="0"/>
	<property name="subminor_version" value="17"/>
	<property name="version_status" value="ga"/>

	<property name="version" value="${major_version}.${minor_version}.${subminor_version}-${version_status}"/>
	<property name="prodName" value="mysql-connector-java"/>
	<property name="extra.version" value=""/>
	<property name="fullProdName" value="${prodName}-${version}${extra.version}"/>

	<property name="buildDir" value="../build-mysql-jdbc"/>
	<property name="distDir" value="../dist-mysql-jdbc"/>
	<property name="junit.results" value="${buildDir}/junit"/>

	<property name="test.jvm.prefix" value="default-jvm-"/>

	<!-- 
	
	     The following four properties are needed for building the docs. They're
	     set to the defaults for my development environment, but can be passed
	     on the command line to ant via -D switches. 
	-->

	<property name="com.mysql.jdbc.docs.sourceDir" value="/home/mmatthew/work/docs/mysqldoc/Docs/connector-j-en.xml"/>
	<property name="com.mysql.jdbc.docs.DocBookXSL" value="/usr/local/share/docbook-xsl-1.67.2"/>
	<property name="com.mysql.jdbc.docs.FopPath" value="/usr/java/fop-0.20.5/fop.sh"/>
	<property name="com.mysql.jdbc.docs.LinksPath" value="/usr/bin/links"/>


	<path id="project.build.classpath">
		<fileset dir="lib-nodist">
			<include name="**/*.jar"/>
		</fileset>

		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>

		<pathelement location="${buildDir}/${fullProdName}" />
	</path>

	<target name="init" depends="-initCopy, -initAuthClient">
		<!-- Check that files needed to generate documentation are in place -->

		<available file="${com.mysql.jdbc.docs.sourceDir}" property="com.mysql.jdbc.docs.sourcesPresent"/>
		<available file="${com.mysql.jdbc.docs.DocBookXSL}" property="com.mysql.jdbc.docs.docBookPresent"/>
		<available file="${com.mysql.jdbc.docs.FopPath}" property="com.mysql.jdbc.docs.fopPresent"/>
	</target>

	<target name="-initCopy" depends="clean">
		<tstamp/>

		<filter token="VERSION" value="${version}"/>

		<copy todir="${buildDir}/${fullProdName}" filtering="true">
			<fileset dir="." excludes="**/CVS">
				<patternset id="classjar" >
					<exclude name="**/*.class*"/>
					<exclude name="**/*.jar"/>
				</patternset>
			</fileset>


			<filterset>
				<filter token="MYSQL_CJ_MAJOR_VERSION" value="${major_version}"/>
				<filter token="MYSQL_CJ_MINOR_VERSION" value="${minor_version}"/>
				<filter token="MYSQL_CJ_SUBMINOR_VERSION" value="${subminor_version}"/>
				<filter token="MYSQL_CJ_VERSION_STATUS" value="${version_status}"/>
				<filter token="MYSQL_CJ_VERSION" value="${version}"/>
				<filter token="MYSQL_CJ_FULL_PROD_NAME" value="${fullProdName}"/>
			</filterset>
		</copy>

		<copy todir="${buildDir}/${fullProdName}" filtering="false">
			<fileset dir="." excludes="**/CVS">
				<patternset id="dojar" >
					<include name="**/*.jar*"/>
				</patternset>
			</fileset>
		</copy>

		<mkdir dir="${buildDir}/clover" />
		<mkdir dir="${buildDir}/clover/db" />
		<mkdir dir="${buildDir}/clover/report" />
	</target>

	<target name="-initAuthClient" depends="-initCopy" if="com.mysql.jdbc.authClientBuild">
		<copy file="./lib-nodist/CommercialLicenseConfiguration.notjava"
			toFile="${buildDir}/${fullProdName}/com/mysql/jdbc/LicenseConfiguration.java"
			overwrite="true"/>
	</target>

	<!-- 
		This is the target we use to make MySQL AB GPL-licensed and binaries 
		as well as commercially-licensed binaries that include source files.
	 -->

	<target name="fullPackage" description="Builds driver, binary .jar file, docs and packages (.zip, .tar.gz) suitable for distribution that _do_ contain sources" depends="fullDist, -makePackages" />

	<!-- This is the target we use to make MySQL AB Commercially-licensed binaries -->

	<target name="fullPackageNoSources" description="Builds driver, binary .jar file, docs and packages (.zip, .tar.gz) suitable for distribution that do _not_ contain sources" depends="fullDist, -removeSources, -makePackages" />

	<target name="fullDist" description="Builds driver, binary .jar file and docs, basically a distribution 'image'" depends="dist, styleDocs" />

	<target name="package" depends="dist, -makePackages" />

	<target name="-removeSources">
		<echo>Removing sources from ${buildDir}</echo>
		<delete>
			<fileset dir="${buildDir}">
				<include name="**/*.java" />
			</fileset>
		</delete>
	</target>
	
	<target name="-makePackages" depends="dist">
		<delete file="${distDir}/${fullProdName}.tar.gz"/>
		
		<patternset id="non.test.sources" >
			<exclude name="**/*.nb*"/>
			<exclude name="**/*.bak"/>
			<exclude name="**/*.*~"/>
			<exclude name="**/lib-nodist/*"/>
			<exclude name="**/lib-coverage/*"/>
			<exclude name="**/clover/*"/>
			<exclude name="**/checkstyle/*"/>
			<exclude name="**/.*"/>
			<exclude name="**/nodist"/>
		</patternset>
		
		<tar destfile="${distDir}/${fullProdName}.tar.gz"
			compression="gzip" longfile="gnu">
			<tarfileset dir="${buildDir}">
				<patternset refid="non.test.sources" />
			</tarfileset>
		</tar>
		
		<checksum file="${distDir}/${fullProdName}.tar.gz" forceOverwrite="yes" fileext=".md5"/>
		
		<delete file="${distDir}/${fullProdName}.zip"/>
		
		<jar jarfile="${distDir}/${fullProdName}.zip">
			<fileset dir="${buildDir}">
				<patternset refid="non.test.sources" />
			</fileset>
		</jar>
		
		<checksum file="${distDir}/${fullProdName}.zip" forceOverwrite="yes" fileext=".md5"/>
	</target>

	<target name="dist" depends="init, compile">

		<delete file="${buildDir}/${fullProdName}-bin.jar"/>
		<delete file="${distDir}/${fullProdName}.jar"/>

		<mkdir dir="${distDir}" />

		<jar jarfile="${buildDir}/${fullProdName}/${fullProdName}-bin.jar"
			basedir="${buildDir}/${fullProdName}"
			includes="**/*.class,**/*.properties*,COPYING,README"
			excludes="testsuite/**"
			index="true"
		/>



	</target>

	<target name="test.all.multi" depends="test.multi, test.compliance.multijvm"/>

	<!-- Runs compliance testsuite against multiple JVMs and server configs -->
	
	<target name="test.multijvm" 
			depends="-test.multijvm.1,-test.multijvm.2,
				-test.multijvm.3,-test.multijvm.4,
				-test.multijvm.5,-test.multijvm.6,
				-test.multijvm.6,-test.multijvm.7,
				-test.multijvm.8"/>

	<target name="-test.multijvm.1" if="com.mysql.jdbc.testsuite.jvm.1">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.test.jvm" value="${com.mysql.jdbc.testsuite.jvm.1}"/>
			<param name="test.jvm.prefix" value="-jvm-1"/>
		</antcall>
	</target>

	<target name="-test.multijvm.2" if="com.mysql.jdbc.testsuite.jvm.2">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.2}"/>
			<param name="test.jvm.prefix" value="-jvm-2"/>
		</antcall>
	</target>

	<target name="-test.multijvm.3" if="com.mysql.jdbc.testsuite.jvm.3">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.3}"/>
			<param name="test.jvm.prefix" value="-jvm-3"/>
		</antcall>
	</target>

	<target name="-test.multijvm.4" if="com.mysql.jdbc.testsuite.jvm.4">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.4}"/>
			<param name="test.jvm.prefix" value="-jvm-4"/>
		</antcall>
	</target>

	<target name="-test.multijvm.5" if="com.mysql.jdbc.testsuite.jvm.5">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.5}"/>
			<param name="test.jvm.prefix" value="-jvm-5"/>
		</antcall>
	</target>

	<target name="-test.multijvm.6" if="com.mysql.jdbc.testsuite.jvm.6">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.6}"/>
			<param name="test.jvm.prefix" value="-jvm-6"/>
		</antcall>
	</target>

	<target name="-test.multijvm.7" if="com.mysql.jdbc.testsuite.jvm.7">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.7}"/>
			<param name="test.jvm.prefix" value="-jvm-7"/>
		</antcall>
	</target>

	<target name="-test.multijvm.8" if="com.mysql.jdbc.testsuite.jvm.8">
		<antcall target="test.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.8}"/>
			<param name="test.jvm.prefix" value="-jvm-8"/>
		</antcall>
	</target>
	
	<!-- Runs the testsuite against multiple versions of the MySQL server -->
	
	<target name="test.multi" 
		depends="-test.multi.1,-test.multi.2,-test.multi.3,
		-test.multi.3,-test.multi.4,-test.multi.5,
		-test.multi.6,-test.multi.7,-test.multi.8">
	</target>

	<target name="-test.multi.1" if="com.mysql.jdbc.testsuite.url.1">
		<antcall target="test">
			<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.1}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}-config-1"/>
		</antcall>
	</target>

	<target name="-test.multi.2" if="com.mysql.jdbc.testsuite.url.2">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.2}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-2."/>
			</antcall>
		</target>

	<target name="-test.multi.3" if="com.mysql.jdbc.testsuite.url.3">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.3}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-3."/>
			</antcall>
		</target>

	<target name="-test.multi.4" if="com.mysql.jdbc.testsuite.url.4">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.4}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-4."/>
			</antcall>
		</target>

	<target name="-test.multi.5" if="com.mysql.jdbc.testsuite.url.5">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.5}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-5."/>
			</antcall>
		</target>

	<target name="-test.multi.6" if="com.mysql.jdbc.testsuite.url.6">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.6}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-6."/>
			</antcall>
		</target>

	<target name="-test.multi.7" if="com.mysql.jdbc.testsuite.url.7">
			<antcall target="test">
				<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.7}"/>
				<param name="test.result.prefix" value="${test.jvm.prefix}-config-7."/>
			</antcall>
		</target>
	
	<target name="-test.multi.8" if="com.mysql.jdbc.testsuite.url.8">
		<antcall target="test">
			<param name="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url.8}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}-config-8."/>
		</antcall>
	</target>

	<target name="-setTestResultPrefix" unless="${test.result.prefix}">
		<property name="test.result.prefix" value=""/>
	</target>
	
	<target name="test" depends="compile, -setTestResultPrefix">
		<mkdir dir="${junit.results}"/>
		<property name="compliance.jvm" value="java"/>

		<echo message="Running unit tests against ${com.mysql.jdbc.testsuite.url} with result filename prefix ${test.result.prefix}"/>

		<junit printSummary="yes" fork="on" jvm="${compliance.jvm}">
			<jvmarg value="-Xmx512m"/>
			<sysproperty key="com.mysql.jdbc.testsuite.url" value="${com.mysql.jdbc.testsuite.url}"/>
			<classpath>
				<pathelement location="${buildDir}/${fullProdName}" />
				<pathelement location="./lib-nodist/providerutil.jar" />
				<pathelement location="./lib-nodist/fscontext.jar" />
				<pathelement path="${java.class.path}" />
				<pathelement path="/src/clover-0.6b/lib/clover.jar"/>
			</classpath>

			

			<batchtest fork="yes" todir="${junit.results}">
				<fileset dir="${buildDir}/${fullProdName}">
					<include name="**/*Test.java" />
					
					<!-- Don't run base classes, why JUnit test doesn't
					     skip abstract classes is beyond me ... -->
					<exclude name="**/Base*.java" />
					<exclude name="**/perf/*.java"/>
				</fileset>
				
				<formatter type="plain" extension="${test.result.prefix}.txt"/>
				<formatter type="xml" extension="${test.result.prefix}.xml"/>
			</batchtest>
		</junit>
	</target>

	<target name="test.with.clover">
		<mkdir dir="${junit.results}"/>
		<junit printSummary="yes">
			<sysproperty key="com.mysql.jdbc.testsuite.url" value="jdbc:mysql:///test"/>
			<classpath>
				<pathelement location="${buildDir}/${fullProdName}" />
				<pathelement location="./lib-nodist/providerutil.jar" />
				<pathelement location="./lib-nodist/fscontext.jar" />
				<pathelement path="${java.class.path}" />
				<pathelement path="/src/clover-0.6b/lib/clover.jar"/>
			</classpath>

			<formatter type="plain" />

			<batchtest fork="no" todir="${junit.results}">
				<fileset dir="${buildDir}/${fullProdName}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Runs compliance testsuite against multiple JVMs and server configs -->

	<target name="test.compliance.multijvm" 
		depends="-test.compliance.multijvm.1,-test.compliance.multijvm.2,
			-test.compliance.multijvm.3,-test.compliance.multijvm.4,
			-test.compliance.multijvm.5,-test.compliance.multijvm.6,
			-test.compliance.multijvm.6,-test.compliance.multijvm.7,
			-test.compliance.multijvm.8"/>

	<target name="-test.compliance.multijvm.1" if="com.mysql.jdbc.testsuite.jvm.1">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.1}"/>
			<param name="test.jvm.prefix" value="jvm-1-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.2" if="com.mysql.jdbc.testsuite.jvm.2">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.2}"/>
			<param name="test.jvm.prefix" value="jvm-2-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.3" if="com.mysql.jdbc.testsuite.jvm.3">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.3}"/>
			<param name="test.jvm.prefix" value="jvm-3-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.4" if="com.mysql.jdbc.testsuite.jvm.4">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.4}"/>
			<param name="test.jvm.prefix" value="jvm-4-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.5" if="com.mysql.jdbc.testsuite.jvm.5">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.5}"/>
			<param name="test.jvm.prefix" value="jvm-5-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.6" if="com.mysql.jdbc.testsuite.jvm.6">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.6}"/>
			<param name="test.jvm.prefix" value="jvm-6-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.7" if="com.mysql.jdbc.testsuite.jvm.7">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.7}"/>
			<param name="test.jvm.prefix" value="jvm-7-"/>
		</antcall>
	</target>

	<target name="-test.compliance.multijvm.8" if="com.mysql.jdbc.testsuite.jvm.8">
		<antcall target="test.compliance.multi">
			<param name="com.mysql.jdbc.testsuite.jvm" value="${com.mysql.jdbc.testsuite.jvm.8}"/>
			<param name="test.jvm.prefix" value="jvm-8-"/>
		</antcall>
	</target>

	<!-- Runs compliance testsuite against multiple server configurations -->

	<target name="test.compliance.multi" 
		depends="-test.compliance.multi.1,-test.compliance.multi.2,-test.compliance.multi.3,
		-test.compliance.multi.3,-test.compliance.multi.4,-test.compliance.multi.5,
		-test.compliance.multi.6,-test.compliance.multi.7,-test.compliance.multi.8">
	</target>

	<target name="-test.compliance.multi.1" if="com.mysql.jdbc.compliance.url.1">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.1}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-1."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.2" if="com.mysql.jdbc.compliance.url.2">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.2}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-2."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.3" if="com.mysql.jdbc.compliance.url.3">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.3}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-3."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.4" if="com.mysql.jdbc.compliance.url.4">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.4}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-4."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.5" if="com.mysql.jdbc.compliance.url.5">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.5}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-5."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.6" if="com.mysql.jdbc.compliance.url.6">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.6}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-6."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.7" if="com.mysql.jdbc.compliance.url.7">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.7}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-7."/>
		</antcall>
	</target>

	<target name="-test.compliance.multi.8" if="com.mysql.jdbc.compliance.url.8">
		<antcall target="test.compliance">
			<param name="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url.7}"/>
			<param name="test.result.prefix" value="${test.jvm.prefix}config-8."/>
		</antcall>
	</target>

	<!-- 
	
		Tests for JDBC compliance. The JDBC compliance testsuite
	    is not shipped with MySQL Connector/J as it is not licensible
	    except from Sun.
	     
	    The properties com.mysql.jdbc.compliance.url and
	    jdbc-compliance-location must be set
	    prior to running this test. 
	     
	-->

	<target name="test.compliance" depends="compile">
		<property name="compliance.jvm" value="java"/>

		<echo message="Running compliance tests against ${com.mysql.jdbc.compliance.url} with result filename prefix ${test.result.prefix}"/>
		<mkdir dir="${junit.results}"/>
		<junit printsummary="yes" jvm="${compliance.jvm}">
			<sysproperty key="com.mysql.jdbc.compliance.url" value="${com.mysql.jdbc.compliance.url}"/>
			<classpath>
				<pathelement location="${buildDir}/${fullProdName}"/>
				<fileset dir="lib-nodist">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement location="${jdbc-compliance-location}"/>
			</classpath>

			<formatter type="xml"/>

			<test outfile="TEST-${test.result.prefix}BatchUpdateTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.BatchUpdateTest"/>

			<test outfile="TEST-${test.result.prefix}ConnectionTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.ConnectionTest"/>

			<test outfile="TEST-${test.result.prefix}DatabaseMetaDataTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.DatabaseMetaDataTest"/>

			<test outfile="TEST-${test.result.prefix}EscapeSyntaxTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.EscapeSyntaxTest"/>

			<test outfile="TEST-${test.result.prefix}PreparedStatementTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.PreparedStatementTest"/>

			<test outfile="TEST-${test.result.prefix}ResultSetMetadataTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.ResultSetMetadataTest"/>

			<test outfile="TEST-${test.result.prefix}ResultSetTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.ResultSetTest"/>

			<test outfile="TEST-${test.result.prefix}StatementTest" fork="yes" todir="${junit.results}" 
	    		name="com.mysql.jdbc.compliance.tests.StatementTest"/>
		</junit>
	</target>

	<target name="compile" depends="init, -commercialLicense, compile-driver, compile-testsuite">
	</target>

	<!-- Compiles the driver itself -->

	<target name="compile-driver" depends="init, -commercialLicense">
		<javac srcdir="${buildDir}/${fullProdName}"
			   destdir="${buildDir}/${fullProdName}"
	        deprecation="off"
			debug="on"
			excludes="testsuite/**"
		>
			<classpath refid="project.build.classpath"/>
		</javac>

	</target>

	<!-- Compiles the JUnit testsuite -->

	<target name="compile-testsuite" depends="init, -commercialLicense,compile-driver">
		<javac srcdir="${buildDir}/${fullProdName}"
			   destdir="${buildDir}/${fullProdName}"
	        deprecation="off"
			debug="off"
			
		>
			<classpath refid="project.build.classpath"/>
		</javac>
	</target>

	<target name="realclean">
		<delete dir="${buildDir}"/>
		<delete>
			<fileset dir="${distDir}" 
				includes="${fullProdName}.zip,${fullProdName}.tar.gz"/>
		</delete>
	</target>

	<target name="clean" unless="com.mysql.jdbc.noCleanBetweenCompiles">
			<delete dir="${buildDir}"/>
	</target>

	<target name="styleDocs" depends="init, -copyDocs, -styleDocsHtmlTop, -styleDocsFopTop" if="${com.mysql.jdbc.docs.sourcesPresent}"/>

	<target name="-copyDocs" depends="-copyDocsPathCheck">
		<copy file="${com.mysql.jdbc.docs.sourceDir}"
		  todir="${buildDir}/${fullProdName}/docs/sources"
		  failonerror="false"/>
	</target>

	<target name="-copyDocsPathCheck" unless="com.mysql.jdbc.docs.sourceDir">
		<echo>
Running stylesheets on non-latest documentation sources. 
		
If you want to use up-to-date versions of the documentation, set the property 
&quot;com.mysql.jdbc.docs.sourceDir&quot; to point to the location
of the DocBook sources (i.e. &quot;connector-j-en.xml&quot;).
		</echo>
	</target>

	<target name="-styleDocsHtmlTop" depends="-styleDocsStyleSheetsCheck, -styleDocsHtml"/>

	<target name="-styleDocsStyleSheetsCheck" unless="com.mysql.jdbc.docs.docBookPresent">
		<echo>
Not applying style sheets to documentation, as the DocBook XSL distribution path
has not been set with the &quot;com.mysql.jdbc.docs.DocBookXSL&quot; property.
		</echo>
	</target>

	<target name="-styleDocsFopTop" depends="-styleDocsStyleSheetsCheck, -styleDocsFop" if="com.mysql.jdbc.docs.fopPresent"/>

	<target name="-styleDocsFop" if="com.mysql.jdbc.docs.fopPresent">
		<xslt basedir="${buildDir}/${fullProdName}/docs/sources" destdir="${buildDir}/${fullProdName}/docs"
      		extension=".fop-xml" style="${com.mysql.jdbc.docs.DocBookXSL}/fo/docbook.xsl" includes="connector-j-en.xml">
			<param name="fop.extensions" expression="1"/>
			<param name="ection.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="page.margin.inner"  expression="1in"/>
			<param name="page.margin.outer" expression="1in"/>
		</xslt>

		<exec dir="${buildDir}/${fullProdName}/docs" executable="${com.mysql.jdbc.docs.FopPath}">
			<arg line="-fo connector-j-en.fop-xml connector-j-en.pdf"/>
		</exec>

		<!--<delete file="${buildDir}/${fullProdName}/docs/connector-j-en.fop-xml"/>-->
	</target>

	<target name="-styleDocsHtml">
		<xslt
      		out="${buildDir}/${fullProdName}/docs/index.html" style="${com.mysql.jdbc.docs.DocBookXSL}/html/docbook.xsl" in="${buildDir}/${fullProdName}/docs/sources/connector-j-en.xml">
			<param name="section.autolabel" expression="1"/>
			<param name="section.label.includes.component.label" expression="1"/>
		</xslt>

		<!-- Create a plaintext version of the manual using 'links' -->

		<exec dir="${buildDir}/${fullProdName}/docs" 
			executable="${com.mysql.jdbc.docs.LinksPath}"
			output="${buildDir}/${fullProdName}/docs/README.txt">

			<!-- Unfortunately, ant doesn't seem to pass this in a way
			     'links' groks using the new value='', file='' syntax, 
			     so we need to use this depecrated form -->

			<arg line="-dump index.html"/>
		</exec>
	</target>

	<!-- Replaces copyright/license banner at the top of every source
	     file -->

	<target name="-commercialLicense" depends="init" if="com.mysql.jdbc.commercialBuild">
		<!-- These are the GPL and FLOSS exceptions. They don't get shipped with
			     commercial builds -->
			
		<delete file="${buildDir}/${fullProdName}/COPYING"/>
		<delete file="${buildDir}/${fullProdName}/EXCEPTIONS-CONNECTOR-J"/>
			
		<!-- Pull in the commercial license itself -->
			
		<copy file="lib-nodist/MySQLEULA.txt" toDir="${buildDir}/${fullProdName}"/>
			
		<loadfile property="commercialLicenseText"
			srcFile="lib-nodist/commercialLicense.txt"/>
		
			<replaceregexp 
				match="Copyright.*1307.[^replaceregexp]*USA"
				replace="${commercialLicenseText}"
				flags="s">
			<fileset dir="${buildDir}/${fullProdName}" includes="**/*"/>
		</replaceregexp>
	</target>
</project>
